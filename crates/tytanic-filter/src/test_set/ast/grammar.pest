// root expression
main = { SOI ~ expr ~ EOI }

// expression parsing
// expr = { prefix* ~ term ~ postfix* ~ (infix ~ prefix* ~ term ~ postfix* )* }
expr = { prefix_op* ~ expr_term ~ (infix_op ~ prefix_op* ~ expr_term)* }
    expr_term = _{ expr_atom | expr_group }
        expr_group = _{ "(" ~ expr ~ ")" }
        expr_atom = _{ pat | str | func | id | num }

    prefix_op = _{ prefix_op_excl | prefix_op_not }
        prefix_op_excl = { "!" }
        prefix_op_not = { "not" }

    infix_op = _{
        infix_op_caret
        | infix_op_amper
        | infix_op_tilde
        | infix_op_pipe
        | infix_op_xor
        | infix_op_and
        | infix_op_diff
        | infix_op_or
    }
        infix_op_caret = { "^" }
        infix_op_amper = { "&" }
        infix_op_tilde = { "~" }
        infix_op_pipe = { "|" }
        infix_op_xor = { "xor" }
        infix_op_and = { "and" }
        infix_op_diff = { "diff" }
        infix_op_or = { "or" }

// identifiers
id = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "-" | "_")* }

// functions
func = ${ id ~ func_args }
    func_args = !{ func_args_delim_open ~ func_args_inner? ~ func_args_delim_close }
    func_args_inner = { expr ~ (func_args_sep ~ expr)* ~ func_args_sep? }
    func_args_sep = { "," }
    func_args_delim_open = { "(" }
    func_args_delim_close = { ")" }

// test identifier patterns
// a string specifying what kind of pattern it is using a prefix
pat = _{ pat_inner }
    pat_inner = ${ pat_kind ~ pat_sep ~ pat_pat }
    pat_kind = @{
        pat_kind_glob
        | pat_kind_regex
        | pat_kind_exact
    }
        pat_kind_glob = { "glob" | "g" }
        pat_kind_regex =  { "regex" | "r" }
        pat_kind_exact  = { "exact" | "e" }
    pat_pat = _{ str | pat_raw_lit }
    pat_raw_lit = { pat_raw_term_outer+ }
    pat_raw_term_outer = _{
        pat_raw_char_outer+
        | ("(" ~ pat_raw_term_inner+ ~ ")")
        | ("{" ~ pat_raw_term_inner+ ~ "}")
        | ("[" ~ pat_raw_term_inner+ ~ "]")
    }
    pat_raw_term_inner = _{
        pat_raw_char_inner+
        | ("(" ~ pat_raw_term_inner+ ~ ")")
        | ("{" ~ pat_raw_term_inner+ ~ "}")
        | ("[" ~ pat_raw_term_inner+ ~ "]")
    }
    pat_raw_char_outer = _{ pat_raw_char_esc | pat_raw_char_normal_outer }
        pat_raw_char_normal_outer = _{
            !(
                WHITESPACE
                | "\\"
                | ","
                | "(" | ")"
                | "{" | "}"
                | "[" | "]"
            ) ~ ANY
        }
    pat_raw_char_inner = _{ pat_raw_char_esc | pat_raw_char_normal_inner }
        pat_raw_char_normal_inner = _{
            !(
                WHITESPACE
                | "\\"
                | "(" | ")"
                | "{" | "}"
                | "[" | "]"
            ) ~ ANY
        }
        pat_raw_char_esc = _{ "\\" ~ ANY }
    pat_sep = { ":" }

// strings
str = _{ str_single | str_double }
    str_single = ${ str_single_delim ~ str_single_inner ~ str_single_delim }
        str_single_delim = { "'" }
        str_single_inner = @{ str_single_char* }
        str_single_char = _{ !"'" ~ ANY }
    str_double = ${ str_double_delim ~ str_double_inner ~ str_double_delim }
        str_double_delim = { "\"" }
        str_double_inner = @{ str_double_char* }
        str_double_char = _{
            !("\"" | "\\") ~ ANY
            | "\\" ~ str_double_esc_meta
            | "\\" ~ str_double_esc_ascii
            | "\\" ~ str_double_esc_unicode
        }
        str_double_esc_meta = { "\"" | "\\" }
        str_double_esc_ascii = { "n" | "r" | "t" }
        str_double_esc_unicode = @{ "u" ~ "{" ~ ASCII_HEX_DIGIT{1,4} ~ "}" }

// number literals
num = _{ num_inner }
    num_inner = ${ num_part+ ~ (num_sep ~ num_part)* }
    num_part = @{ ASCII_DIGIT+ }
    num_sep = { "_" }

// special rules
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
